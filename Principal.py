# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Principal.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog
from pygments import highlight
from pygments.lexers import HtmlLexer
from pygments.lexers import CssLexer
from pygments.formatters import HtmlFormatter
from pygments.lexers import JavascriptLexer
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
import re
import os


from pygments import highlight
from pygments.lexers import HtmlLexer
from pygments.formatters import HtmlFormatter

#from pygments.lexers import PythonLexer

#--------------Importa JS
from Analizadores.LexicoJS import AnalizarJS
from Analizadores.LexicoJS import ErroresLexicosJS
from Analizadores.ErrorLexicoJS import ErrorLexJS
#--------------Import CSS
from Analizadores.LexicoCSS import AnalizarCSS
from Analizadores.LexicoCSS import ErroresLexicosCSS
from Analizadores.ErrorLexicoCSS import ErrorLexCSS 
#--------------Importa HTML
from Analizadores.LexicoHTML import AnalizarHTML
from Analizadores.LexicoHTML import ErroresLexicosHTML
from Analizadores.ErrorLexicoHTML import ErrorLexHTML
#--------------Importa Expresion 
from Analizadores.LexicoExpresion import LexRTM
from subprocess import check_call
#from Analizadores.LexicoHTML import AnalizarHTML
#from Analizadores.LexicoCSS import AnalizarCSS


class Ui_Ventana(object):
    DireccionTemporal=""
    DireccionAbierto=""
    DireccionGuardar=""
    DireccionGuardarComo=""
    contenido=""
    def setupUi(self, QMainWindow):
        QMainWindow.setObjectName("Ventana")
        QMainWindow.resize(720, 487)
        QMainWindow.setMaximumSize(QtCore.QSize(720, 487))
        self.centralwidget = QtWidgets.QWidget(QMainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(360, 0, 360, 451))
        
        self.plainTextEdit.setStyleSheet("background: rgb(0, 0, 0);\n"
"color: #ffffff;")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(0, 0, 360, 451))
        self.textEdit.setObjectName("textEdit")
        QMainWindow.setCentralWidget(self.centralwidget)
        self.Menus = QtWidgets.QMenuBar(QMainWindow)
        self.Menus.setGeometry(QtCore.QRect(0, 0, 720, 20))
        self.Menus.setObjectName("Menus")
        self.menuArchivo = QtWidgets.QMenu(self.Menus)
        self.menuArchivo.setObjectName("menuArchivo")
        self.menuAnalizar = QtWidgets.QMenu(self.Menus)
        self.menuAnalizar.setObjectName("menuAnalizar")
        self.menuReporte = QtWidgets.QMenu(self.Menus)
        self.menuReporte.setObjectName("menuReporte")
        QMainWindow.setMenuBar(self.Menus)
        self.statusbar = QtWidgets.QStatusBar(QMainWindow)
        self.statusbar.setObjectName("statusbar")
        QMainWindow.setStatusBar(self.statusbar)
        self.actionAnalizar_JS = QtWidgets.QAction(QMainWindow)
        self.actionAnalizar_JS.setObjectName("actionAnalizar_JS")
        self.actionAnalizar_CSS = QtWidgets.QAction(QMainWindow)
        self.actionAnalizar_CSS.setObjectName("actionAnalizar_CSS")
        self.actionAnalizar_HTML = QtWidgets.QAction(QMainWindow)
        self.actionAnalizar_HTML.setObjectName("actionAnalizar_HTML")
        self.actionAnalizar_RTM = QtWidgets.QAction(QMainWindow)
        self.actionAnalizar_RTM.setObjectName("actionAnalizar_RTM")
        self.actionReporte_JS = QtWidgets.QAction(QMainWindow)
        self.actionReporte_JS.setObjectName("actionReporte_JS")
        self.actionReporte_CSS = QtWidgets.QAction(QMainWindow)
        self.actionReporte_CSS.setObjectName("actionReporte_CSS")
        self.actionReporte_HTML = QtWidgets.QAction(QMainWindow)
        self.actionReporte_HTML.setObjectName("actionReporte_HTML")
        self.actionErrores_JS = QtWidgets.QAction(QMainWindow)
        self.actionErrores_JS.setObjectName("actionErrores_JS")
        self.actionErrores_CSS = QtWidgets.QAction(QMainWindow)
        self.actionErrores_CSS.setObjectName("actionErrores_CSS")
        self.actionErrores_HTML = QtWidgets.QAction(QMainWindow)
        self.actionErrores_HTML.setObjectName("actionErrores_HTML")
        self.actionNuevo = QtWidgets.QAction(QMainWindow)
        self.actionNuevo.setObjectName("actionNuevo")
        self.actionAbrir = QtWidgets.QAction(QMainWindow)
        self.actionAbrir.setObjectName("actionAbrir")
        self.actionGuardar = QtWidgets.QAction(QMainWindow)
        self.actionGuardar.setObjectName("actionGuardar")
        self.actionGuardar_como = QtWidgets.QAction(QMainWindow)
        self.actionGuardar_como.setObjectName("actionGuardar_como")
        self.menuArchivo.addAction(self.actionNuevo)
        self.menuArchivo.addAction(self.actionAbrir)
        self.menuArchivo.addAction(self.actionGuardar)
        self.menuArchivo.addAction(self.actionGuardar_como)
        self.menuAnalizar.addSeparator()
        self.menuAnalizar.addAction(self.actionAnalizar_JS)
        self.menuAnalizar.addAction(self.actionAnalizar_CSS)
        self.menuAnalizar.addAction(self.actionAnalizar_HTML)
        self.menuAnalizar.addAction(self.actionAnalizar_RTM)
        self.menuAnalizar.addSeparator()
        self.menuReporte.addAction(self.actionErrores_JS)
        self.menuReporte.addAction(self.actionErrores_CSS)
        self.menuReporte.addAction(self.actionErrores_HTML)
        self.Menus.addAction(self.menuArchivo.menuAction())
        self.Menus.addAction(self.menuAnalizar.menuAction())
        self.Menus.addAction(self.menuReporte.menuAction())

        self.retranslateUi(QMainWindow)
        QtCore.QMetaObject.connectSlotsByName(QMainWindow)

    def retranslateUi(self, Ventana):
        _translate = QtCore.QCoreApplication.translate
        Ventana.setWindowTitle(_translate("Ventana", "Proyecto1 - ML WEB EDITOR 201513758"))
        self.menuArchivo.setTitle(_translate("Ventana", "Archivo"))
        self.menuAnalizar.setTitle(_translate("Ventana", "Analizar"))
        self.menuReporte.setTitle(_translate("Ventana", "Reporte"))
        self.actionAnalizar_JS.setText(_translate("Ventana", "Analizar JS"))
        self.actionAnalizar_CSS.setText(_translate("Ventana", "Analizar CSS"))
        self.actionAnalizar_HTML.setText(_translate("Ventana", "Analizar HTML"))
        self.actionAnalizar_RTM.setText(_translate("Ventana", "Analizar RMT"))
        self.actionReporte_JS.setText(_translate("Ventana", "Reporte JS"))
        self.actionReporte_CSS.setText(_translate("Ventana", "Reporte CSS"))
        self.actionReporte_HTML.setText(_translate("Ventana", "Reporte HTML"))
        self.actionErrores_JS.setText(_translate("Ventana", "Errores JS"))
        self.actionErrores_CSS.setText(_translate("Ventana", "Errores CSS"))
        self.actionErrores_HTML.setText(_translate("Ventana", "Errores HTML"))
        self.actionNuevo.setText(_translate("Ventana", "Nuevo"))
        self.actionAbrir.setText(_translate("Ventana", "Abrir"))
        self.actionGuardar.setText(_translate("Ventana", "Guardar"))
        self.actionGuardar_como.setText(_translate("Ventana", "Guardar Como..."))

        self.actionNuevo.triggered.connect(lambda:self.MenuNuevo())
        self.actionAbrir.triggered.connect(lambda:self.MenuAbrir())
        self.actionGuardar.triggered.connect(lambda:self.MenuGuardar())
        self.actionGuardar_como.triggered.connect(lambda:self.MenuGuardarComo())
        self.actionAnalizar_JS.triggered.connect(lambda:self.MenuAnalizarJS())
        self.actionErrores_JS.triggered.connect(lambda:self.ErroresLexicosJS())
        self.actionAnalizar_CSS.triggered.connect(lambda:self.MenuAnalizarCSS())
        self.actionErrores_CSS.triggered.connect(lambda:self.ErroresLexicosCSS())
        self.actionAnalizar_HTML.triggered.connect(lambda:self.MenuAnalizarHTML())
        self.actionErrores_HTML.triggered.connect(lambda:self.ErroresLexicosHTML())
        self.actionAnalizar_RTM.triggered.connect(lambda:self.MenuAnalizarRTM())

    def MenuNuevo(self):
        self.textEdit.setText("")
        Limp=""
        self.plainTextEdit.setPlainText(Limp)
        
        #self.textEdit.insertHtml("<html><h1>Hola</html>")

    #---------------------MenuAbrir--------------   
    def MenuAbrir(self):
        try:
            self.textEdit.setText("")
            self.plainTextEdit.insertPlainText("")
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            nameFile, _ = QFileDialog.getOpenFileName(None,"Abrir", "","All Files (*);;", options=options)
            print(nameFile)
            if nameFile!='':
                self.DireccionGuardar=nameFile
                archi1=open(nameFile, "r", encoding="utf-8")
                self.contenido=archi1.read()

                Extension=re.split('/',nameFile)
                ExtensionArchivo=Extension[-1]
                print(ExtensionArchivo)
                archi1.close()

                if ".html" in ExtensionArchivo:
                    TextoColor=(highlight(str(self.contenido), HtmlLexer(), HtmlFormatter()))
                    TextoColorCompleto= " <html ><head><meta charset=\"UTF-8\"><style type=\"text/css\">    .s,.s2 ,.mh{           color: yellow;       }   .mi,.mf{           color: blue;       } .c {           color: gray;       }      .n,.kt,.nt,.nn {           color: red;       }    .na {           color: red     }       .o {           color: orange    } .k {           color: red;       }    </style><title>Archivo</title></head><body>"+TextoColor+ "</body></html>"
                    self.textEdit.insertHtml(TextoColorCompleto)
                
                elif ".css" in ExtensionArchivo:
                    TextoColor=(highlight(str(self.contenido), CssLexer(), HtmlFormatter()))
                    TextoColorCompleto= " <html ><head><meta charset=\"UTF-8\"><style type=\"text/css\">    .s,.s2 ,.mh{           color: yellow;       }   .mi,.mf{           color: blue;       } .c {           color: gray;       }      .n,.kt,.nt,.nn {           color: red;       }    .na {           color: red     }       .o {           color: orange    } .k {           color: red;       }    </style><title>Archivo</title></head><body>"+TextoColor+ "</body></html>"
                    self.textEdit.insertHtml(TextoColorCompleto)

                elif ".js" in ExtensionArchivo:
                    TextoColor=(highlight(str(self.contenido), JavascriptLexer(), HtmlFormatter()))
                    TextoColorCompleto= "<html ><head><meta charset=\"UTF-8\"><style type=\"text/css\">  .nb{           color: green;       }  .s,.s2,.s1 ,.mh{           color: yellow;       }   .mi,.mf,.kc{           color: blue;       } .c,.cm,.c1 {           color: gray;       }      .kd {           color: red;       }    .na,.nx {           color: red     }       .o {           color: orange    } .k {           color: red;       }    </style><title>Archivo</title></head><body> "+TextoColor+ "</body></html>"
                    self.textEdit.insertHtml(TextoColorCompleto)
                elif ".rmt" in ExtensionArchivo:
                    TextoColor=(highlight(str(self.contenido), JavascriptLexer(), HtmlFormatter()))
                    TextoColorCompleto= "<html ><head><meta charset=\"UTF-8\"><style type=\"text/css\">  .nb{           color: green;       }  .s,.s2,.s1 ,.mh{           color: yellow;       }   .mi,.mf,.kc{           color: blue;       } .c,.cm,.c1 {           color: gray;       }      .kd {           color: red;       }    .na,.nx {           color: red     }       .o {           color: orange    } .k {           color: red;       }    </style><title>Archivo</title></head><body> "+TextoColor+ "</body></html>"
                    self.textEdit.insertHtml(TextoColorCompleto)
                else:
                    self.textEdit.insertHtml(contenido)

                try:
                    #----------------linea de la direccion
                    search = open(nameFile)
                    for line in search:
                        if "PATHW" in line:
                            print (line) 
                            nombreLista = re.split(' |\n',line)
            
                    self.DireccionTemporal = nombreLista[1]
                    print (self.DireccionTemporal)
                    search.close()
                except:
                    print("no hay ruta")  

              
        except:
            print("Error JFile")

    #-------------------------Menu Guardar Como---------------
    def MenuGuardarComo(self):
        try:
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            nameFile, _ = QFileDialog.getSaveFileName(None,"Guardar", "","All Files (*);;", options=options)
            print(nameFile)

            if nameFile!='':
                Texto = self.textEdit.toPlainText()
                ArchivoGuardar = open(nameFile,"w",encoding="utf-8") 
            
                ArchivoGuardar.write(str(Texto)) 
                print("Guardar Como")
               
                ArchivoGuardar.close()     

        except:
            print("Error Ruta")
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Archivo No Guardado | Direccion Incorrecta")
            msgBox.setWindowTitle("Alerta")
            msgBox.setStandardButtons(QMessageBox.Ok)
            

            returnValue = msgBox.exec()

    #-------------------------Menu Guardar-------------
    def MenuGuardar(self):
        try:
            Texto = self.textEdit.toPlainText() 
            print(Texto)
            ArchivoGuardar = open(self.DireccionGuardar,"w",encoding="utf-8") 
            
            ArchivoGuardar.write(str(Texto)) 
            
            print("Guardado")
            ArchivoGuardar.close() 
        except:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Archivo No Guardado | Abra un Archivo")
            msgBox.setWindowTitle("Alerta")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()

#---------------Metodo Menu Analisis JS ---------------


    def MenuAnalizarJS(self):

    #------------------econtrar path

        entrada = self.contenido #fila 1 col 0 hasta fila 2 col 10
        #retorno = lexer(entrada)
        Consola,lista_errorJS=AnalizarJS(entrada,self.DireccionTemporal)
        self.plainTextEdit.insertPlainText(Consola)
        
        
        
        CadenaGrap="digraph G {"+ Consola+"}"
        archi1 = open("ReporteJS.dot","w") 
        archi1.write(CadenaGrap) 
        archi1.close() 

        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText("Analisis JS Teminado")
        msgBox.setWindowTitle("Alerta")
        msgBox.setStandardButtons(QMessageBox.Ok)
        returnValue = msgBox.exec()
        
        #check_call(['dot', '-Tpng','C:/Users/Horacio Ciraiz/Documents/CURSOS/2DO SEMESTRE 2020/PROGRAMACION/LABORATORIO/Proyecto1/OLC1_Proyecto1_201513758/ReporteJS.dot','-o','C:/Users/Horacio Ciraiz/Documents/CURSOS/2DO SEMESTRE 2020/PROGRAMACION/LABORATORIO/Proyecto1/OLC1_Proyecto1_201513758/ReporteJS.png'])
        check_call(['dot', '-Tpng','ReporteJS.dot','-o','ReporteJS.png'])
        
        #subprocess.call('dot ReporteJS.dot -o ReporteJS.png -Tpng ', shell=True)
        #os.system("dot -ReportejS.png -Tpng ReporteJS.dot")


#---------------Metodo Error Lexico JS-----------------
    def ErroresLexicosJS(self):
        ErroresLexicosJS()
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText("Errores Lexicos JS")
        msgBox.setWindowTitle("Alerta")
        msgBox.setStandardButtons(QMessageBox.Ok)
        returnValue = msgBox.exec()

#---------------Metodo Menu Analisis CSS---------------
    def MenuAnalizarCSS(self):
        entrada = self.contenido #fila 1 col 0 hasta fila 2 col 10
        #retorno = lexer(entrada)
        
        Consola,lista_errorCSS=AnalizarCSS(entrada,self.DireccionTemporal)
        self.plainTextEdit.insertPlainText(Consola)

        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText("Analisis Lexico CSS Terminado")
        msgBox.setWindowTitle("Alerta")
        msgBox.setStandardButtons(QMessageBox.Ok)
        returnValue = msgBox.exec()
#----------------Metodo Error Lexico CSS----------------
    def ErroresLexicosCSS(self):
        ErroresLexicosCSS()
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText("Errores Lexicos CSS")
        msgBox.setWindowTitle("Alerta")
        msgBox.setStandardButtons(QMessageBox.Ok)
        returnValue = msgBox.exec()

#---------------Metodo Menu Analisis HTML---------------
    def MenuAnalizarHTML(self):
        entrada = self.contenido #
        #retorno = lexer(entrada)
        Consola,lista_errorHTML=AnalizarHTML(entrada,self.DireccionTemporal)
        self.plainTextEdit.insertPlainText(Consola)
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText("Analisis Lexico HTML Terminado")
        msgBox.setWindowTitle("Alerta")
        msgBox.setStandardButtons(QMessageBox.Ok)
        returnValue = msgBox.exec()
#----------------Metodo Error Lexico HTML----------------
    def ErroresLexicosHTML(self):
        ErroresLexicosHTML()
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText("Errores Lexico HTML ")
        msgBox.setWindowTitle("Alerta")
        msgBox.setStandardButtons(QMessageBox.Ok)
        returnValue = msgBox.exec()

#------------------Analizar RMT        
    def MenuAnalizarRTM(self):
        entrada = self.contenido 
        #Arreglo=[]
        Arreglo=LexRTM(entrada+"$")


        self.plainTextEdit.insertPlainText(Arreglo)
        print("RTM")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    QMainWindow = QtWidgets.QMainWindow()
    ui = Ui_Ventana()
    ui.setupUi(QMainWindow)
    QMainWindow.show()
    sys.exit(app.exec_())
